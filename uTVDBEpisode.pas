{ ******************************************************* }
{ *
  {* uTVDBEpisode.pas
  {* Delphi Implementation of the Class TVDBEpisode
  {* Generated by Enterprise Architect
  {* Created on:      09-févr.-2015 11:43:17
  {* Original author: Labelleg  OK
  {*
  {******************************************************* }

unit uTVDBEpisode;

interface

uses System.Generics.Collections;

type

  TTVDBEpisode = class
  strict private
    FepisodeNumber: String;
    FfirstAired: String;
    FhasImage: boolean;
    FseasonNumber: String;
    Ftitle: String;

  public

    property episodeNumber: String read FepisodeNumber write FepisodeNumber;
    property firstAired: String read FfirstAired write FfirstAired;
    property hasImage: boolean read FhasImage write FhasImage;
    property seasonNumber: String read FseasonNumber write FseasonNumber;
    property title: String read Ftitle write Ftitle;

    function toString: String;  reintroduce;
    constructor Create(tvdbTitle: String; tvdbFirstAired: String; tvdbSeasonNumber: String; tvdbEpisodeNumber: String;
      hasTVDBImage: boolean); overload;
    // constructor Create; overload;
    destructor Destroy; override;
  end;

  TVDBEpisodeColl = class(TObjectList<TTVDBEpisode>)
  public
    constructor Create; overload;
    destructor Destroy; override;

    function containsAll(coll: TVDBEpisodeColl): boolean;
    function IsEmpty: boolean;

    function toString: String; reintroduce;
  end;

implementation

{ implementation of TVDBEpisode }

constructor TTVDBEpisode.Create(tvdbTitle, tvdbFirstAired, tvdbSeasonNumber, tvdbEpisodeNumber: String;
  hasTVDBImage: boolean);
begin
  inherited Create;

  self.Ftitle := tvdbTitle;
  self.FfirstAired := tvdbFirstAired;
  self.FseasonNumber := tvdbSeasonNumber;
  self.FepisodeNumber := tvdbEpisodeNumber;
  self.FhasImage := hasTVDBImage;
end;

destructor TTVDBEpisode.Destroy;
begin
  inherited Destroy;
end;

function TTVDBEpisode.toString: String;
begin
  Result := FseasonNumber + 'x' + FepisodeNumber + ' - ' + Ftitle + ' (' + FfirstAired + ')';
end;

{ TVDBEpisodeColl }

function TVDBEpisodeColl.containsAll(coll: TVDBEpisodeColl): boolean;
var
  unElement: TTVDBEpisode;
begin

  for unElement in coll do
  begin
    if not self.Contains(unElement) then
    begin
      Result := False;
      exit;
    end;

  end;
  Result := True;

end;

constructor TVDBEpisodeColl.Create;
begin
  inherited Create();
  OwnsObjects := True;

end;

destructor TVDBEpisodeColl.Destroy;
begin

  inherited;
end;

function TVDBEpisodeColl.IsEmpty: boolean;
begin
  Result := (self.Count = 0);
end;

function TVDBEpisodeColl.toString: String;
var
  item: TTVDBEpisode;
begin

  Result := '';

  for item in self do
  begin
    Result := Result + '; ' + item.toString;
  end;

end;

end.
