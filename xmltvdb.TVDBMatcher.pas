{ ******************************************************* }
{ *
  {* uTVDBMatcher.pas
  {* Delphi Implementation of the Class TVDBMatcher
  {* Generated by Enterprise Architect
  {* Created on:      09-févr.-2015 11:44:25
  {* Original author: Labelleg
  {*
  {******************************************************* }

unit xmltvdb.TVDBMatcher;

interface

uses System.Generics.Collections, Xml.XMLIntf, xmltvdb.TVDBEpisode,
  xmltvdb.Episode, uTVDBBind;

type
  ITVDBMatcher = interface
    ['{E0A2B7C3-9639-4560-BD4F-DB2310308894}']

    function GetcontainsTitleMatches: TVDBEpisodeColl;
    function GetexactTitleMatches: TVDBEpisodeColl;
    function GetfuzzyTitleMatches: TVDBEpisodeColl;
    function GetoriginalAirDateMatches: TVDBEpisodeColl;

  end;

  TTVDBMatcher = class(TInterfacedObject, ITVDBMatcher)
  strict private
    FcontainsTitleMatches:   TVDBEpisodeColl;
    FexactTitleMatches:      TVDBEpisodeColl;
    FfuzzyTitleMatches:      TVDBEpisodeColl;
    ForiginalAirDateMatches: TVDBEpisodeColl;
  public
    function GetcontainsTitleMatches: TVDBEpisodeColl;
    function GetexactTitleMatches: TVDBEpisodeColl;
    function GetfuzzyTitleMatches: TVDBEpisodeColl;
    function GetoriginalAirDateMatches: TVDBEpisodeColl;

    constructor Create(guideEpisode: IEpisode; tvdbEpisodes: IXMLTVDBEpisodeTypeList); overload;
    constructor Create; overload;
    destructor Destroy; override;

  end;

  TGracenoteMatcher = class(TInterfacedObject) // , ITVDBMatcher)
  strict private
    // FcontainsTitleMatches:   TVDBEpisodeColl;
    // FexactTitleMatches:      TVDBEpisodeColl;
    // FfuzzyTitleMatches:      TVDBEpisodeColl;
    // ForiginalAirDateMatches: TVDBEpisodeColl;
    Falreadymatched: ITVDBMatcher;
  public
    // function GetcontainsTitleMatches: TVDBEpisodeColl;
    // function GetexactTitleMatches: TVDBEpisodeColl;
    // function GetfuzzyTitleMatches: TVDBEpisodeColl;
    // function GetoriginalAirDateMatches: TVDBEpisodeColl;

    constructor Create(guideEpisode: IEpisode; var alreadymatched: ITVDBMatcher); overload;
    // constructor Create; overload;
    destructor Destroy; override;

  end;

implementation

uses Rest.Utils, System.Math, System.SysUtils, xmltvdb.tvdb, uDataModule,
  System.JSON, CodeSiteLogging, xmltv.Gracenote;
{ implementation of TVDBMatcher }

constructor TTVDBMatcher.Create(guideEpisode: IEpisode; tvdbEpisodes: IXMLTVDBEpisodeTypeList);
var
  guideTitle:         string;
  hasTitle:           Boolean;
  epFirstAired:       string;
  hasOriginalAirDate: Boolean;
  tvdbEp:             IXMLTVDBEpisodeType;
  tvdbTitle:          string;
  tvdbFirstAired:     string;
  tvdbSeasonNumber:   string;
  tvdbEpisodeNumber:  string;
  hasTVDBImage:       Boolean;
  i:                  Integer;
  TVDBEpisode:        ITVDBEpisode;
  contains:           Boolean;
  containsNormalized: Boolean;
begin

  FcontainsTitleMatches   := TVDBEpisodeColl.Create;
  FexactTitleMatches      := TVDBEpisodeColl.Create;
  FfuzzyTitleMatches      := TVDBEpisodeColl.Create;
  ForiginalAirDateMatches := TVDBEpisodeColl.Create;

  {
    * exact title & original airdate (check for multipart?)
    * fuzzy title & original air date (check for multipart)
    * contains title & original air date (check for multipart)
    * exact title (must be a solo match)
    * original airdate (must be a solo match)
    * fuzzy title (must be a solo match)
    * contains title (must be a solo match)
  }

  // episode info
  guideTitle   := guideEpisode.getTitle();
  hasTitle     := guideEpisode.hasTitle();
  epFirstAired := iif(guideEpisode.hasOriginalAirDate(),
    TTVGeneral.dateToTVDBString(guideEpisode.getOriginalAirDate()), '');

  // String epFirstAired := guideEpisode.hasOriginalAirDate() ? dateToTVDBString(guideEpisode.getOriginalAirDate()) : null;
  hasOriginalAirDate := (epFirstAired <> '');

  if (not hasTitle and not hasOriginalAirDate) then
    exit; // return;//nothing to do!

  for i := 0 to tvdbEpisodes.Count - 1 do
  begin
    tvdbEp := tvdbEpisodes[i];

    tvdbTitle         := tvdbEp.EpisodeName;      // .getChildText(' EpisodeName ');
    tvdbFirstAired    := tvdbEp.FirstAired;       // getChildText(' FirstAired ');
    tvdbSeasonNumber  := tvdbEp.SeasonNumber;     // getChildText(' SeasonNumber ');
    tvdbEpisodeNumber := tvdbEp.EpisodeNumber;    // getChildText(' EpisodeNumber ');
    hasTVDBImage      := (tvdbEp.Filename <> ''); // getChildText(' filename '));
    // <filename> stores the path to the .jpg image for the episode
    // final TVDBEpisode TVDBEpisode := new TVDBEpisode(tvdbTitle, tvdbFirstAired, tvdbSeasonNumber, tvdbEpisodeNumber,    hasTVDBImage);
    TVDBEpisode := TTVDBEpisode.Create(tvdbTitle, tvdbFirstAired, tvdbSeasonNumber, tvdbEpisodeNumber, hasTVDBImage);

    if (hasTitle and (tvdbTitle <> '')) then
    begin
      // exact title matches (alwasy case-insensitive and special chars removed (normalized))
      if SameText(TTVGeneral.normalize(guideTitle), TTVGeneral.normalize(tvdbTitle)) then
      begin
        GetexactTitleMatches.add(TVDBEpisode);
      end
      else // not exact title match, check for fuzzy and contains
      begin
        if (TTVGeneral.fuzzyTitleMatch(guideTitle, tvdbTitle, 15)) then
          // allow 15 percent discrepency)
          GetfuzzyTitleMatches.add(TVDBEpisode);

        // check for contains (the program guide title contains the tvdb title)
        contains           := guideTitle.ToLower.contains(tvdbTitle.ToLower);
        containsNormalized := TTVGeneral.normalize(guideTitle)
          .ToLower.contains(TTVGeneral.normalize(tvdbTitle).ToLower);
        if (contains or containsNormalized) then
          GetcontainsTitleMatches.add(TVDBEpisode);
      end;
    end;

    if (hasOriginalAirDate) then
    begin
      if SameText(epFirstAired, tvdbFirstAired) then
        GetoriginalAirDateMatches.add(TVDBEpisode);
    end;
  end;

end;

constructor TTVDBMatcher.Create;
begin
  inherited Create;

  FcontainsTitleMatches   := TVDBEpisodeColl.Create;
  FexactTitleMatches      := TVDBEpisodeColl.Create;
  FfuzzyTitleMatches      := TVDBEpisodeColl.Create;
  ForiginalAirDateMatches := TVDBEpisodeColl.Create;
end;

destructor TTVDBMatcher.Destroy;
begin
  FcontainsTitleMatches.free;
  FexactTitleMatches.free;
  FfuzzyTitleMatches.free;
  ForiginalAirDateMatches.free;

  inherited Destroy;
end;

function TTVDBMatcher.GetcontainsTitleMatches: TVDBEpisodeColl;
begin
  REsult := FcontainsTitleMatches;
end;

function TTVDBMatcher.GetexactTitleMatches: TVDBEpisodeColl;
begin
  REsult := FexactTitleMatches;
end;

function TTVDBMatcher.GetfuzzyTitleMatches: TVDBEpisodeColl;
begin
  REsult := FfuzzyTitleMatches;
end;

function TTVDBMatcher.GetoriginalAirDateMatches: TVDBEpisodeColl;
begin
  REsult := ForiginalAirDateMatches;
end;

constructor TGracenoteMatcher.Create(guideEpisode: IEpisode; var alreadymatched: ITVDBMatcher);
var
  // JSONText:           string;
  // LJsonArr:           TJSONArray;
  // LJsonValue:         TJsonValue;
  // title:              string;
  // tmsId:              string;
  // rootId:             string;
  // seriesId:           string;
  // longDescription:    string;
  // tvdbID:             string;
  // programelem:        TJsonValue;
//  entityType: string;
  Zap2itid:   string;
  // episodeTitle:       string;
  // episodeNum:         string;
  // seasonNum:          string;
  // LJPair:             TJSONPair;
  // LItem:              TJsonValue;
  guideTitle:         string;
  hasTitle:           Boolean;
  epFirstAired:       string;
  hasOriginalAirDate: Boolean;
  EpisodeFound:       Boolean;
  TVDBEpisode:        ITVDBEpisode;
  origAirDate:        string;
  contains:           Boolean;
  containsNormalized: Boolean;
  ep:                 ITVDBEpisode;
  leprog:             TGracenoteProgram;
  title:              string;
  episodeTitle:       string;
  episodeNum:         string;
  seasonNum:          string;
 // qq: string;
begin

  Falreadymatched := alreadymatched;
  // episode info
  guideTitle   := guideEpisode.getTitle();
  hasTitle     := guideEpisode.hasTitle();
  epFirstAired := iif(guideEpisode.hasOriginalAirDate(),
    TTVGeneral.dateToTVDBString(guideEpisode.getOriginalAirDate()), '');

  hasOriginalAirDate := (epFirstAired <> '');

  if (not hasTitle and not hasOriginalAirDate) then
    exit; // nothing to do!

  EpisodeFound := False;
  Zap2itid     := guideEpisode.GetOriginalms_progid;

  if hasOriginalAirDate and not Zap2itid.IsEmpty then
  begin

    if not Zap2itid.IsEmpty then
    begin

      Zap2itid := Zap2itid.Split(['.'])[1];

      EpisodeFound := False;

      if not Zap2itid.IsEmpty then
      begin

        if TGracenote.Coll.GetByTmsID(Zap2itid, leprog) then
        begin

          title        := leprog.title; // ', title);
          episodeTitle := leprog.SerieEpisodeData.episodeTitle;
          episodeNum   := leprog.SerieEpisodeData.episodeNum;
          seasonNum    := leprog.SerieEpisodeData.seasonNum;
          origAirDate  := leprog.origAirDate;

          EpisodeFound := true;

        end;


        if not EpisodeFound then begin


              if  TGracenote.Coll.GetByNameAndDate(guideEpisode.getSeries.GetseriesName, TTVGeneral.dateToTVDBString(guideEpisode.getOriginalAirDate),  leprog) then
              begin
                    title        := leprog.title; // ', title);
                    episodeTitle := leprog.SerieEpisodeData.episodeTitle;
                    episodeNum   := leprog.SerieEpisodeData.episodeNum;
                    seasonNum    := leprog.SerieEpisodeData.seasonNum;
                    origAirDate  := leprog.origAirDate;

                    EpisodeFound := true;

              end;


        end;


      end;

    end;
  end;

  if EpisodeFound then
  begin

    // final TVDBEpisode TVDBEpisode := new TVDBEpisode(tvdbTitle, tvdbFirstAired, tvdbSeasonNumber, tvdbEpisodeNumber,    hasTVDBImage);
    TVDBEpisode := TTVDBEpisode.Create(episodeTitle, origAirDate, seasonNum, episodeNum, False);

    if (hasTitle and (episodeTitle <> '')) then
    begin
      // exact title matches (alwasy case-insensitive and special chars removed (normalized))
      if SameText(TTVGeneral.normalize(guideTitle), TTVGeneral.normalize(episodeTitle)) then
      begin
        Falreadymatched.GetexactTitleMatches.add(TVDBEpisode);
      end
      else // not exact title match, check for fuzzy and contains
      begin
        if (TTVGeneral.fuzzyTitleMatch(guideTitle, episodeTitle, 15)) then
          // allow 15 percent discrepency)
          Falreadymatched.GetfuzzyTitleMatches.add(TVDBEpisode);

        // check for contains (the program guide title contains the tvdb title)
        contains           := guideTitle.ToLower.contains(episodeTitle.ToLower);
        containsNormalized := TTVGeneral.normalize(guideTitle)
          .ToLower.contains(TTVGeneral.normalize(episodeTitle).ToLower);
        if (contains or containsNormalized) then
          Falreadymatched.GetcontainsTitleMatches.add(TVDBEpisode);
      end;
    end;

    if (hasOriginalAirDate) then
    begin
      if SameText(epFirstAired, origAirDate) then

        if Falreadymatched.GetoriginalAirDateMatches.Count = 0 then
        begin

          Falreadymatched.GetoriginalAirDateMatches.add(TVDBEpisode);
        end
        else
        begin
          ep := Falreadymatched.GetoriginalAirDateMatches.FindByOriginalDate(origAirDate);
          if ep <> nil then
          begin
            ep.AddMissingInfo(TVDBEpisode);

          end;
        end;
    end;

  end;

end;

destructor TGracenoteMatcher.Destroy;
begin
  // FcontainsTitleMatches.free;
  // FexactTitleMatches.free;
  // FfuzzyTitleMatches.free;
  // ForiginalAirDateMatches.free;
  inherited Destroy;
end;

// function TGracenoteMatcher.GetcontainsTitleMatches: TVDBEpisodeColl;
// begin
// Result:= FcontainsTitleMatches;
// end;
//
// function TGracenoteMatcher.GetexactTitleMatches: TVDBEpisodeColl;
// begin
// Result := FexactTitleMatches;
// end;
//
// function TGracenoteMatcher.GetfuzzyTitleMatches: TVDBEpisodeColl;
// begin
// Result := FfuzzyTitleMatches;
// end;
//
// function TGracenoteMatcher.GetoriginalAirDateMatches: TVDBEpisodeColl;
// begin
// Result := ForiginalAirDateMatches;
// end;

end.
